#!/usr/bin/env python
# coding: utf-8
'''Run this script to update mime_types.cc conveniently.

This script will download and parse mime types from nginx and apache-httpd,
generate cpp code from it, and print to <project_root>/src/util/mime_types.cc

You can run this anywhere since the path of mime_types.cc is determined
based on the relative path from this script(see line 77)
'''

import re
import requests
from datetime import datetime
from os import path

output_file_dir = '../src/util/mime_types_data.cc'
mime_type_dict = {}
output_template = '''\
/**
 * AUTO GENERATED by ../../script/update_mime_types_cc.py,
 *   make sure if you really need to modify this file!
 *
 * update time: ${time} (UTC)
 */

#include "rautils/mime_types.h"

#include <map>
#include <string>

namespace rayalto {
namespace utils {
namespace misc {

// clang-format off
const std::map<std::string, std::string> MimeTypes::ext2mime_ {
${data}
};
// clang-format on

} // namespace misc
} // namespace utils
} // namespace rayalto'''


def load_nginx_mime_type() -> None:
    global mime_type_dict
    nginx_mime_type_text = requests.get(
        'https://hg.nginx.org/nginx/raw-file/default/conf/mime.types').text
    for mime, ext in re.findall(r'^ +([^ \n]+)\n? +([^;]+);$',
                                nginx_mime_type_text, re.M):
        if ext.find(' ') == -1:
            mime_type_dict[ext] = mime
        else:
            for extension in ext.split(' '):
                mime_type_dict[extension] = mime


def load_httpd_mime_type() -> None:
    global mime_type_dict
    httpd_mime_type_text = requests.get(
        'https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types'
    ).text
    for mime, ext in re.findall(r'^(?!#)([^\t]+?)\t+([^\n]+?)$',
                                httpd_mime_type_text, re.M):
        if ext.find(' ') == -1:
            mime_type_dict[ext] = mime
        else:
            for extension in ext.split(' '):
                mime_type_dict[extension] = mime


def print_to_file() -> None:
    global output_file_dir
    output_file = open(
        path.normpath(path.join(path.dirname(__file__), output_file_dir)), 'w')
    output_file.write(
        output_template.replace('${time}', str(datetime.utcnow())).replace(
            '${data}', ',\n'.join([
                f'    {{"{pair[0]}", "{pair[1]}"}}'
                for pair in sorted(mime_type_dict.items())
            ])))


if __name__ == '__main__':
    print('download mime type from nginx ...', end='')
    load_nginx_mime_type()
    print('OK')
    print('download mime type from apache httpd ...', end='')
    load_httpd_mime_type()
    print('OK')
    print('print mime_types.cc')
    print_to_file()
    print('Done')
